runners:
  - &node
    executable: node
    base-args: []
    args: []
    hide-executable-name: true

  - &node-eval
    <<: *node
    base-args:
      - --input-type=commonjs
      - -e
      - |
        const { context } = require('execy');
        const { exit } = require('process');
        const AsyncFunction = Object.getPrototypeOf(async function(){}).constructor;
        const f = new AsyncFunction(context.script);
        f().catch(e => {
          console.error(e);
          exit(1);
        });

  - &shell
    <<: *node-eval
    script: |
      const { context, runCommand } = require('execy');
      await runCommand({
        executable: context.shell || 'sh',
        'base-args': [ '-c', context.sh ],
        args: context.args,
        'hide-executable-name': true,
        'log-exit': false,
      });

  - &sequence
    <<: *node-eval
    script: |
      const { context, runCommand } = require('execy');
      for(const cmd of context.commands) await runCommand(cmd);

  - &parallel
    <<: *node-eval
    script: |
      const { context, runCommand } = require('execy');
      await Promise.all(context.commands.map(runCommand));

  - &dist-runner
    <<: *node
    base-args:
      - --unhandled-rejections=strict
      - --enable-source-maps

scripts:
  build:
    <<: *node
    name: Build
    args:
      - build
      - --prod

  start:
    <<: *sequence
    name: Start
    commands:
      - <<: *node
        name: Build
        args:
          - build
      - <<: *dist-runner
        log-exit: false
        args:
          - dist/app.js

  test-parallel-executions:
    <<: *parallel
    name: Test
    commands:
      - <<: *shell
        name: first
        sh: |
          echo 1
          sleep 2
          echo 2
          sleep 2
          echo 3
          sleep 2
          echo 4
      - <<: *shell
        name: second
        sh: |
          sleep 1
          echo I"'"m
          sleep 2
          echo here
